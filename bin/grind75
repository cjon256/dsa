#!/usr/bin/env python3
""" work with grind75 problem set and leetcode-cli
    grind75 is a list of leetcode problems that are considered good to grind
    leetcode-cli is a command line tool to interact with leetcode
    this script will print the grind75 problems and their status
    if the first argument is 'next' it will print the first problem that is not checked
    this is used mainly from my dsa.nvim plugin"""

import os
import sys
from typing import List

grind75: List[int] = [
    1,
    20,
    21,
    121,
    125,
    226,
    242,
    704,
    733,
    235,
    110,
    141,
    232,
    278,
    383,
    70,
    409,
    206,
    169,
    67,
    543,
    876,
    104,
    217,
    252,
    13,
    844,
    338,
    100,
    191,
    14,
    136,
    234,
    283,
    101,
    268,
    9,
    108,
    190,
    572,
    977,
    53,
    57,
    542,
    973,
    3,
    15,
    102,
    133,
    150,
    207,
    208,
    322,
    238,
    155,
    98,
    200,
    994,
    33,
    39,
    46,
    56,
    236,
    981,
    721,
    75,
    139,
    416,
    8,
    54,
    78,
    199,
    5,
    62,
    105,
    11,
    17,
    79,
    438,
    310,
    621,
    146,
    230,
    739,
    198,
    134,
    31,
    36,
    49,
    152,
    211,
    417,
    19,
    1730,
    287,
    692,
    300,
    261,
    210,
    24,
    113,
    128,
    189,
    328,
    394,
    525,
    662,
    658,
    424,
    285,
    55,
    2,
    22,
    148,
    323,
    1197,
    560,
    735,
    528,
    215,
    221,
    48,
    103,
    362,
    437,
    50,
    74,
    179,
    91,
    253,
    7,
    73,
    143,
    271,
    787,
    863,
    16,
    61,
    153,
    227,
    377,
    380,
    435,
    76,
    297,
    42,
    295,
    127,
    224,
    1235,
    23,
    84,
    124,
    895,
    4,
    329,
    32,
    588,
    759,
    212,
    269,
    815,
    239,
    336,
    25,
    37,
    41,
    51,
    632,
]

# get the output of leetcode list
leetcode_list = os.popen("leetcode list").read().split("\n")

""" leetcode list now looks like this:
      âœ” [  1 ] Two Sum                                                      Easy   (51.64 %)
        [  2 ] Add Two Numbers                                              Medium (42.08 %)
        [  3 ] Longest Substring Without Repeating Characters               Medium (34.39 %)
        [  4 ] Median of Two Sorted Arrays                                  Hard   (39.07 %)
        [  5 ] Longest Palindromic Substring                                Medium (33.51 %)
        [  6 ] Zigzag Conversion                                            Medium (47.05 %)
        [  7 ] Reverse Integer                                              Medium (28.25 %)
        [  8 ] String to Integer (atoi)                                     Medium (17.01 %)
        [  9 ] Palindrome Number                                            Easy   (55.40 %)
        [ 10 ] Regular Expression Matching                                  Hard   (28.04 %)
...
        [3017] Count the Number of Houses at a Certain Distance II          Hard   (17.02 %)
  ðŸ”’    [3018] Maximum Number of Removal Queries That Can Be Processed I    Hard   (52.27 %)

        Listed: 2936     Locked: 574      Starred: 0
        Accept: 47       Not-Ac: 0        Remain:  2889
        Easy  : 717      Medium: 1557     Hard:    662

"""

leetcode_dict = {}
for i in leetcode_list:
    if i:
        if "[" not in i:
            continue
        locked = "ðŸ”’" in i
        checked = "âœ”" in i
        number = i.split("[")[1].split("]")[0].strip()
        entry = {
            "line": i,
            "checked": checked,
            "locked": locked,
            "number": number,
        }
        leetcode_dict[int(number)] = entry


def print_all(filter=lambda _: True):
    for k in grind75:
        entry = leetcode_dict[k]
        if entry["locked"]:
            priv = "ðŸ”’"
        else:
            priv = "  "
        if entry["checked"]:
            chk = "âœ”"
        else:
            chk = " "
        name = entry["line"][14:64].strip()
        hardness = entry["line"][75:].strip()
        result = f"{k:04} {priv} {chk} {name:60} {hardness}"
        if filter(entry):
            print(result)


def usage():
    print("Usage: neetcode [next|undone]")
    print("  next: return the first grind75 problem that is not checked")
    print("  undone: return all grind75 problems that are not checked")
    print("  no argument: return all grind75 problems")
    sys.exit(1)


# return first grind75 problem that is not checked if argeumnet is 'next'
if len(sys.argv) > 1:
    if sys.argv[1] == "next":
        for j in grind75:
            entry = leetcode_dict[j]
            if not entry["checked"]:
                print(j)
                break
    elif sys.argv[1] == "undone":
        print_all(filter=lambda x: not x["checked"])
    else:
        usage()
else:
    print_all()
