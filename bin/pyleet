#!/usr/bin/env python3
"""Python3 version of leetcode-cli wrapper"""
# pylint: enable=useless-suppression
# pylint: disable=missing-function-docstring


import argparse
import os
import sys

import leetopenlib

# load environment variable for PYLEETCODE
base_path = os.environ.get("LEET_CODE_PATH")
EDITOR = os.environ.get("EDITOR", "nvim")
leetcode_path = os.path.expanduser("~/.leetcode")

argparser = argparse.ArgumentParser(description="leet")
argparser.add_argument("-f", action="store_true", help="force overwrite")
argparser.add_argument(
    "subcommand", choices=["create", "c", "test", "t", "submit", "x", "edit", "info"]
)
argparser.add_argument("problem", help="problem number")
args = argparser.parse_args()

problem_id = args.problem
problem_name = leetopenlib.lookup_problem(problem_id)

PYLINT_DISABLES = """\
# pylint: disable=missing-class-docstring, missing-function-docstring, missing-module-docstring
# pylint: disable=invalid-name, line-too-long, too-few-public-methods
# pylint: enable=useless-suppression
"""

if problem_name is None:
    print(f"problem {problem_id} not found")
    sys.exit(1)

filename = f"{int(problem_id):04d}.{problem_name}.py"
leetcode_path = f"{leetcode_path}/code/{problem_id}.{problem_name}.py"
local_path = f"{base_path}/python/{filename}"
leetcode_python_config_path = (
    os.path.expanduser("~/.leetcode") + "/leetcode-python.toml"
)
leetcode_config_path = os.path.expanduser("~/.leetcode") + "/leetcode.toml"


def create_problem():
    if os.path.exists(local_path) and not args.f:
        print(f"python/{filename} already exists")
        sys.exit(1)
    if not os.path.exists(leetcode_python_config_path):
        os.system("cd ~/.leetcode && make")
    os.system(f"cp {leetcode_python_config_path} {leetcode_config_path}")
    os.system(f"leetcode edit {problem_id}")
    os.system(f"mv '{leetcode_path}' '{local_path}'")
    os.system(f"gsed -i '/^    def /a\\        pass' '{local_path}'")
    for line in PYLINT_DISABLES.split("\n"):
        os.system(f"gsed -i '/^#  Percent:/a \\{line}' '{local_path}'")
    os.system(f"cat {base_path}/lib/share/pyleet/test-block.py >> '{local_path}'")
    print(f"created python/{filename}")


print(f"problem {problem_id} {problem_name} {args.subcommand}")

if args.subcommand in ["create", "c"]:
    create_problem()
elif args.subcommand in ["test", "t"]:
    print(f"testing {filename}")
    os.system(f"cp '{local_path}' '{leetcode_path}'")
    os.system(f"leetcode test {problem_id}")
elif args.subcommand in ["submit", "x"]:
    print(f"submitting {filename}")
    os.system(f"cp '{local_path}' '{leetcode_path}'")
    os.system(f"leetcode exec {problem_id}")
elif args.subcommand == "edit":
    if not os.path.exists(local_path):
        create_problem()
    os.system(f"(cd {base_path}/python && {EDITOR} '{filename}')")
elif args.subcommand == "info":
    if not os.path.exists(local_path):
        create_problem()
    print(f"dir: {base_path}/python")
    print(f"file: {filename}")
else:
    print("unknown subcommand")
    sys.exit(1)
